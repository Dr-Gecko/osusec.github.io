<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Writeups on OSU Security Club</title><link>https://osusec.org/categories/writeups/</link><description>Recent content in Writeups on OSU Security Club</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Feb 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://osusec.org/categories/writeups/index.xml" rel="self" type="application/rss+xml"/><item><title>0x41414141 CTF - 0x414141</title><link>https://osusec.org/blog/0x41414141-ctf-0x414141/</link><pubDate>Tue, 02 Feb 2021 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/0x41414141-ctf-0x414141/</guid><description>Prompt I think offshift promised to opensource some of their code
author: notforsale
Solution First off, we navigate to the offshift-dev github account, linked from the offshift site. Unfortunately, nothing there. Searching google for ‚Äúoffshift github‚Äù brings us to a different github with a single suspicious repository. This has two commits, one where files are uploaded, and one in which the _pycache_ folder is deleted. That folder sounds interesting, so we clone the repository, and checkout the commit where the files were added:</description></item><item><title>Crowdstrike Adversary Quest - Much Sad</title><link>https://osusec.org/blog/crowdstrike-adversary-quest-much-sad/</link><pubDate>Tue, 02 Feb 2021 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/crowdstrike-adversary-quest-much-sad/</guid><description>Prompt We have received some information that CATAPULT SPIDER has encrypted a client‚Äôs cat pictures and successfully extorted them for a ransom of 1337 Dogecoin. The client has provided the ransom note, is there any way for you to gather more information about the adversary‚Äôs online presence?
NOTE: Flags will be easily identifiable by following the format CS{some_secret_flag_text}. They must be submitted in full, including the CS{ and } parts.</description></item><item><title>BSidesPDX - Down the Rabbit Hole</title><link>https://osusec.org/blog/bsidespdx-down-the-rabbit-hole/</link><pubDate>Sun, 25 Oct 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/bsidespdx-down-the-rabbit-hole/</guid><description>Prompt Category: Over The Air
297 Points
5 Solves
During one of the commercial breaks of my favorite state sponsored educational video, there was some interference once again. There was a woman wearing some sort of face mask and there were strange tones. The tones were familiar and rang a bell, but I couldn‚Äôt quite put my finger on them. I don‚Äôt know what these things mean, but maybe you can figure it out.</description></item><item><title>BSidesPDX - Please Stand By</title><link>https://osusec.org/blog/bsidespdx-please-stand-by/</link><pubDate>Sun, 25 Oct 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/bsidespdx-please-stand-by/</guid><description>Prompt Category: Over The Air
263 Points
14 Solves
Sometimes I like to tune into the TV when no shows are on so I can watch the test pattern. I like to believe that there‚Äôs a secret message hidden in the transmission.
twitch.tv/over_the_air
Author(s): 0xdade &amp;amp; fdcarl
Solution This challenge is about the ‚ÄúPlease Stand By‚Äù screen, presumably. Let‚Äôs start by looking there. This screen is displayed during the first 2:09 of the twitch stream(recording)</description></item><item><title>BSidesPDX - Xclusive Numborz</title><link>https://osusec.org/blog/bsidespdx-xclusive-numborz/</link><pubDate>Sun, 25 Oct 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/bsidespdx-xclusive-numborz/</guid><description>Prompt Category: Over The Air
290 Points
8 Solves
I was watching my regularly scheduled state sponsored programming when I got some strange interference. It sounded like a little girl was talking to me but I couldn‚Äôt understand what she was saying. Can you figure it out? There‚Äôs no space for mistakes, and no room for questions.
twitch.tv/over_the_air
Author(s): 0xdade &amp;amp; fdcarl
Solution The first challenge was easy, but this one is a little trickier.</description></item><item><title>EkoPartyCTF - Docs</title><link>https://osusec.org/blog/ekopartyctf-docs/</link><pubDate>Mon, 28 Sep 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/ekopartyctf-docs/</guid><description>EkoParty CTF 2020 Git 2
Prompt Exact prompt has been forgotten. Linked to this GitHub repo
Solution As I mentioned in the writeup for leak, I was in a very githubby mindset when I started this challenge. For that reason, I solved this challenge first.
A quick inspection of the repo shows that it features an accidentally committed SSH private key and matching public key. I copied the text of these out of the commit log, and into chall and chall.</description></item><item><title>EkoPartyCTF - Env</title><link>https://osusec.org/blog/ekopartyctf-env/</link><pubDate>Mon, 28 Sep 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/ekopartyctf-env/</guid><description>EkoParty CTF 2020 Git 3
Prompt Not too sure of the original prompt, however I did not need it.
Solution After the second part of the git challenge saga, we have gotten a new repository with some new github actions. We know, before analyzing these however, that:
Issues filed to the ekolabs repo will be ‚Äòmoved‚Äô to the ekoparty-internal repo. We control content in the submitted issues, and this is copied to the new issues in ekoparty-internal repo.</description></item><item><title>EkoPartyCTF - Leak</title><link>https://osusec.org/blog/ekopartyctf-leak/</link><pubDate>Mon, 28 Sep 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/ekopartyctf-leak/</guid><description>EkoParty CTF 2020 Git 1
Prompt Exact prompt has been forgotten. Linked to this GitHub repo
Solution This solution was quite obscure, as I approached this challenge in a github mindset, not a ctf::misc one. In light of this, I solved the second challenge first üòõ
When I got on to solving this one, it took me several runs through the full commit history of the repo before seeing this:</description></item><item><title>Fword CTF - Identity Fraud</title><link>https://osusec.org/blog/fword-ctf-identity-fraud/</link><pubDate>Mon, 31 Aug 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/fword-ctf-identity-fraud/</guid><description>Points: 419 Solves: 86 Category: OSINT
Prompt Someone stole our logo and created a team named ‚ÄúEword‚Äù. In order to find him, I created a fake twitter account (@1337bloggs) to join Eword team. Fortunately, they replied to the fake account and gave me a task to solve. So, if I solve it, they will accept me as a team member. ‚Ä¶ Can you help me in solving the task?
Flag Format: Eword{}</description></item><item><title>NahamConCTF - Finsta</title><link>https://osusec.org/blog/nahamconctf-finsta/</link><pubDate>Sun, 14 Jun 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nahamconctf-finsta/</guid><description>50 points
Prompt This time we have a username. Can you track down NahamConTron?
Solution I used the namechk tools from the OSINT Framework Site. Specifically, I used OSINT Framework &amp;gt; Username &amp;gt; Username Search Engines &amp;gt; Namechk, similarly to in AUCTF.
namechk tells me that there are claimed usernames for the name NahamConTron for many sites, including Instagram.
Checking out the Instagram account, we get the flag.
flag{i_feel_like_that_was_too_easy} ~ Lyell</description></item><item><title>NahamConcTF - Microosoft</title><link>https://osusec.org/blog/nahamconctf-microosoft/</link><pubDate>Sun, 14 Jun 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nahamconctf-microosoft/</guid><description>100 points
Prompt We have to use Microsoft Word at the office!? Oof‚Ä¶
Download the file below.
File
Solution Opening the file does not do much, but it would not be that easy.
Using file we can find out that this is an OOXML document:
$ file microsooft.docx microsooft.docx: Microsoft OOXML Based on this, and some quick reading, we can see that this format can contain files. To view these files, I first tried this chrome extension, before settling on getting a trial licensed version of OxygenXML.</description></item><item><title>NahamConCTF - Time Keeper</title><link>https://osusec.org/blog/nahamconctf-time-keeper/</link><pubDate>Sun, 14 Jun 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nahamconctf-time-keeper/</guid><description>50 points
Prompt There is some interesting stuff on this website. Or at least, I thought there was‚Ä¶
Connect here: https://apporima.com/
Note, this flag is not in the usual format.
Solution After scoping out that site, the title and description heavily hint towards use of the Wayback Machine. Over there we head, then.
First, I noted that there were only two captures, so I figured it would be worth it to compare them.</description></item><item><title>NahamConCTF - Tron</title><link>https://osusec.org/blog/nahamconctf-tron/</link><pubDate>Sun, 14 Jun 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nahamconctf-tron/</guid><description>75 points
Prompt NahamConTron is up to more shenanigans. Find his server.
Solution I used the namechk tools from the OSINT Framework Site. Specifically, I used OSINT Framework &amp;gt; Username &amp;gt; Username Search Engines &amp;gt; Namechk, similarly to in AUCTF.
namechk tells me that there are claimed usernames for the name NahamConTron for many sites:
Now that we have exhausted Instagram, I opened up all the other sites with claimed usernames for NahamConTron and systematically eliminated them.</description></item><item><title>HouseplantCTF - Catography Writeup</title><link>https://osusec.org/blog/houseplantctf-catography-writeup/</link><pubDate>Sun, 26 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/houseplantctf-catography-writeup/</guid><description>Prompt Jubie‚Äôs released her own collection of cat pictures. Go check it out!
http://challs.houseplant.riceteacatpanda.wtf:30002
Note: The Unsplash author credit is not a part of the challenge, it‚Äôs only there to conform with the Unsplash image license.
Dev: jammy
Solution Browsing the site, we can see that it is a collection of cat images‚Ä¶ A lot of them. From inspecting the sources, we can see that these images are pulled from an API at http://challs.</description></item><item><title>HouseplantCTF Satan's Jigsaw Writeup</title><link>https://osusec.org/blog/houseplantctf-satans-jigsaw-writeup/</link><pubDate>Sun, 26 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/houseplantctf-satans-jigsaw-writeup/</guid><description>Prompt Oh no! I dropped my pixels on the floor and they‚Äôre all muddled up! It‚Äôs going to take me years to sort all 90,000 of these again üôÅ
Dev: Tom
Hint! long_to_bytes
File: chall.7z
Solution This provided archive contains 90,000 JPEG‚Äôs. I extracted all of them to ./images (relative to this README‚Äôs PWD). Each of these images has a size of 1 pixel.
Then, comes the fun part. Before reading the hint, I tried just forming the image from the pixels in the order that they appeared in the folder, but this revealed a ‚Äòstatic‚Äô image.</description></item><item><title>IJCTF - Vault Writeup</title><link>https://osusec.org/blog/ijctf-vault-writeup/</link><pubDate>Sun, 26 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/ijctf-vault-writeup/</guid><description>Prompt We locked our secret box, You can directly ping the bot (@Vault #8895 ) using ‚Äústart‚Äù to get the secret but we don‚Äôt know the door code we used random() also we used sleep(10).
shift register‚Ä¶
Author : Harsh and warlock_rootx
Hint: if pin in user_input(): #Good Stuff‚Ä¶
Solution This problem (and especially the hint) make clear what we have to do. We need to provide the discord bot with as many possible passcodes as we can for the suggested charset and length as possible‚Ä¶ now, discord makes this hard, as messages are limited to 2000 characters.</description></item><item><title>ByteBanditsCTF - string.equals(integer) Writeup</title><link>https://osusec.org/blog/bytebanditsctf-string-equals-integer-writeup/</link><pubDate>Sun, 12 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/bytebanditsctf-string-equals-integer-writeup/</guid><description>Prompt Someone gave me two functions to convert strings into integers. I converted some strings to the integers and noted them down. Can you help me converting the concatenation of those strings in the order mentioned in the file hashes.txt into integers?
The answer for this is the multiplication of output of both the functions for the concatenated string. (Wrap the number around flag{})
File: hash.zip
Solution The problem, after a couple read-throughs and looking at the files provided, makes clear that to generate hashes.</description></item><item><title>AUCTF - ALIedAS About Some Thing</title><link>https://osusec.org/blog/auctf-aliedas-about-some-thing/</link><pubDate>Sun, 05 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/auctf-aliedas-about-some-thing/</guid><description>903 points
Prompt See what you can find.
AUCTFShh
Author: c
Solution AUCTFShh looks like a username. To find where that username is in use, we can either check manually (as I started out doing), or use some tools from the OSINT Framework Site. Specifically, I used OSINT Framework &amp;gt; Username &amp;gt; Username Search Engines &amp;gt; Namechk.
I opened each of the greyed out sites in a tab, and looked through each for anything suspicious.</description></item><item><title>AUCTF - Good Old Days</title><link>https://osusec.org/blog/auctf-good-old-days/</link><pubDate>Sun, 05 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/auctf-good-old-days/</guid><description>877 points
Prompt This site used to look a lot cooler.
Author: c
Solution Wayback Machine, here I come! This is the most useful view of the captures for the site ctf.auburn.edu: https://web.archive.org/web/sitemap/https://ctf.auburn.edu/. It shows that, among other subdirectories (and trust me, I visited each a couple times), the /users and /users/50 pages have both been captured.
https://web.archive.org/web/20200213064621/https://ctf.auburn.edu/users has a user called auctf{Th053_w3rE_Th3_guD_0l3_d4y5} ‚Äì why it has to be at the end of that page, I don‚Äôt know (I checked the top half a couple times during my research).</description></item><item><title>AUCTF - OSINT You All Over the Place</title><link>https://osusec.org/blog/auctf-osint-you-all-over-the-place/</link><pubDate>Sun, 05 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/auctf-osint-you-all-over-the-place/</guid><description>A post-competition writeup; 983 points
Prompt I do not have access to the prompt, but the URL is devs-r-us.xyz
Solution After solving the first three challenges, I looked into this one. I investigated the website provided thouroughly, and found out the following:
Images mcofee.png and mcafee.png are different, their difference contains some data and a discord link (applicable to Oryx, the last OSINT challenge). Loretta Mcintosh (with twitter handle @BackUpOrMcintoshYouOut) and Jorge Greenwood (@JorgeGreenwoodCodes), and two sites listed in Jorge Greenwood‚Äôs Bio, all of which are dead ends on Wayback Machine and at the time of writing (facepalm.</description></item><item><title>AUCTF - Who Made Me</title><link>https://osusec.org/blog/auctf-who-made-me/</link><pubDate>Sun, 05 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/auctf-who-made-me/</guid><description>950 points
Prompt One of the developers of this CTF worked really hard on this challenge.
note: the answer is not the author‚Äôs name
Author: c
Solution: Now for a much more real-world OSINT challenge. First, I started by doing a bit of recon. I ascertained that:
AU in AUCTF is for Auburn University (homeapge) AUCTF is run by members of the AUEHC (Auburn University Ethical Hacking Club). AUEHC is comprised of members: President ‚Äì Jordan Sosnowski: jjs@auburn.</description></item><item><title>MidnightsunCTF Snake++</title><link>https://osusec.org/blog/midnightsunctf-snake/</link><pubDate>Sun, 05 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/midnightsunctf-snake/</guid><description>Prompt 141 points, 38 solves
Snake Oil Co. has invented a special programming language to play their new and improved version of Snake. Beat the game to get the flag. settings Service: nc snakeplusplus-01.play.midnightsunctf.se 55555
Solution When I first connected to the remote server, I was presented with a menu, detailing 3 options: Play in player mode, play in computer mode, or exit. The rules detail that a score of 42 will grant you a flag, so I first tried in player mode (where I direct the snake).</description></item><item><title>NahamConCTF - Fake File</title><link>https://osusec.org/blog/nahamconctf-fake-file/</link><pubDate>Wed, 01 Apr 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nahamconctf-fake-file/</guid><description>100 points
Prompt Wait‚Ä¶ where is the flag?
Connect here: nc jh2i.com 50026
Solution Let‚Äôs nc to that server and see what‚Äôs up:
$ nc jh2i.com 50026 bash: cannot set terminal process group (1): Inappropriate ioctl for device bash: no job control in this shell user@host:/home/user$ ls -lah ls -lah total 12K dr-xr-xr-x 1 nobody nogroup 4.0K Jun 12 17:10 . drwxr-xr-x 1 user user 4.0K Jun 4 18:54 .. -rw-r--r-- 1 user user 52 Jun 12 17:10 .</description></item><item><title>FireshellCTF Against the Perfect discord Inquisitor 1 and 2</title><link>https://osusec.org/blog/fireshellctf-against-the-perfect-discord-inquisitor-1-and-2/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/fireshellctf-against-the-perfect-discord-inquisitor-1-and-2/</guid><description>Prompt 1 You‚Äôre on a journey and come to the Tavern of a Kingdom Enemy, you need to get information of a secret organization for the next quest. Be careful about the Inquisitor! He can ban you from this world.
TL;DR find the flag
Kingdom Chall
HINT: Title/Chall name
Prompt 2 There is a mage in the tavern that reveals secrets from the place. He is friendly, so he can help you!</description></item><item><title>TAMUCTF - ALCAPONE</title><link>https://osusec.org/blog/tamuctf-alcapone/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/tamuctf-alcapone/</guid><description>Prompt Eliot Ness is the lead on taking down Al Capone. He has gained access to Capone‚Äôs personal computer but being the good detective he is, he got the disk image of the computer rather than look through the actual computer. Can you help Ness out and find any information to take down the mob boss?
(hint: Al Capone knew his computer was going to be taken soon, so he deleted all important data to ensure no one could see it.</description></item><item><title>TAMUCTF - GEOGRAPHY</title><link>https://osusec.org/blog/tamuctf-geography/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/tamuctf-geography/</guid><description>Prompt My friend told me that she found something cool on the Internet, but all she sent me was 11000010100011000111111111101110 and 11000001100101000011101111011111.
She‚Äôs always been a bit cryptic. She told me to ‚Äúsurround with gigem{} that which can be seen from a bird‚Äôs eye view‚Äù‚Ä¶ what?
Solution Ok. We know that we need to somehow interpret those binary strings as coordinate(s) to get a location that we can look at from ‚Äúbird‚Äôs eye view‚Äù (presumably on Google Maps).</description></item><item><title>TAMUCTF - RUSSIAN_NESTING_DOLLS</title><link>https://osusec.org/blog/tamuctf-russian_nesting_dolls/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/tamuctf-russian_nesting_dolls/</guid><description>Prompt Our monitoring systems noticed some funny-looking DNS traffic on one of our computers. We have the network logs from around the time of the incident. Want to take a look?
Files: netlogs.pcap
Solution Opening the PCAP up in wireshark shows that there are quite a few (37991) DNS packets, as well as a smattring of others (Statistics &amp;gt; Protocol Hierarchy). Let‚Äôs look at the remaining packets first, as there are only a few of them:</description></item><item><title>TAMUCTF - WOOF_WOOF</title><link>https://osusec.org/blog/tamuctf-woof_woof/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/tamuctf-woof_woof/</guid><description>Prompt (I did not get the prompt text in time, and admin closed access to the challs when the CTF ended :()
The instructions mentioned charset A-Z and ‚Äò-‚Äò and ‚Äò@‚Äô, with flag format GIGEM-....
reveille.png
Solution After running strings on the image to no result, we open this image up in stegsolve, and examine the file format Analyze &amp;gt; File Format. We see the usual stuff, except for:
Comment data Length: 1aa (426) Dump of data: Hex: 01aa776f6f662077 6f6f66206261726b 2072756666206261 726b206261726b20 7275666620776f6f 6620776f6f662062 61726b2072756666 206261726b207275 666620776f6f6620 776f6f6620727566 6620776f6f662062 61726b206261726b 206261726b206261 726b20776f6f6620 7275666620776f6f 66206261726b2062 61726b2072756666 20776f6f6620776f 6f6620776f6f6620 776f6f6620776f6f 6620727566662077 6f6f6620776f6f66 206261726b207275 666620776f6f6620 7275666620626172 6b20776f6f662077 6f6f66206261726b 20776f6f66206261 726b207275666620 6261726b20626172 6b206261726b2072 75666620776f6f66 2072756666206261 726b20776f6f6620 776f6f6620776f6f 6620776f6f662072 75666620776f6f66 206261726b20776f 6f66206261726b20 7275666620626172 6b20776f6f662077 6f6f6620776f6f66 207275666620776f 6f6620776f6f6620 776f6f6620776f6f 6620776f6f662072 75666620776f6f66 206261726b206261 726b206261726b20 7275666620776f6f 66206261726b2062 61726b206261726b 206261726b20776f 6f66 Ascii: .</description></item><item><title>TAMUCTF RSAPWN</title><link>https://osusec.org/blog/tamuctf-rsapwn/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/tamuctf-rsapwn/</guid><description>Prompt We must train the next generation of hackers.
nc challenges.tamuctf.com 8573
Solution It looks like this just asks us to find the two ‚Äúbig prime‚Äù factors of the number provided, and return them. Athos‚Äô script does exactly that:
python3 ./exploit.py [+] Opening connection to challenges.tamuctf.com on port 8573: Done b&amp;#39;We must train future hackers to break RSA quickly. Here is how this will work.\nI will multiply together two big primes (&amp;lt;= 10000000), give you the result,\nand you must reply to me in less than two seconds telling me what primes I\nmultiplied.</description></item><item><title>VolgaCTF - excellent-crackme</title><link>https://osusec.org/blog/volgactf-excellent-crackme/</link><pubDate>Sun, 29 Mar 2020 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/volgactf-excellent-crackme/</guid><description>Prompt Excellent Crackme We know one can do pretty much everything in Excel spreadsheets, but this‚Ä¶
excel_crackme
Solution An excel challenge ‚Äì that‚Äôs a first for us! Let‚Äôs crack that file open. We used LibreOffice, as Excel was not installed and Libreoffice was. Upon opening, we are greeted with a message that mentions that macros will not be run for security reasons. we‚Äôll look into that in a sec, thank you, LibreOffice.</description></item><item><title>DefCon Qualifiers 2019 - redacted-puzzle</title><link>https://osusec.org/blog/defcon-qualifiers-2019-redacted-puzzle/</link><pubDate>Sun, 12 May 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/defcon-qualifiers-2019-redacted-puzzle/</guid><description>The only file given is a GIF image, named redacted-puzzle.gif. We must first inspect it:
$ exiftool redacted-puzzle.gif ExifTool Version Number : 10.80 File Name : redacted-puzzle.gif Directory : . File Size : 78 kB File Modification Date/Time : 2019:05:10 17:05:42-07:00 File Access Date/Time : 2019:05:10 17:05:42-07:00 File Inode Change Date/Time : 2019:05:10 17:26:26-07:00 File Permissions : rwxrwxrwx File Type : GIF File Type Extension : gif MIME Type : image/gif GIF Version : 89a Image Width : 1280 Image Height : 720 Has Color Map : Yes Color Resolution Depth : 3 Bits Per Pixel : 2 Background Color : 3 Animation Iterations : Infinite Frame Count : 35 Duration : 8.</description></item><item><title>√•ngstromCTF - streams</title><link>https://osusec.org/blog/angstromctf-streams/</link><pubDate>Fri, 26 Apr 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/angstromctf-streams/</guid><description>Problem White noise is useful whether you are trying to sleep, relaxing, or concentrating on writing papers. Find some natural white noise here.
Note: The flag is all lowercase and follows the standard format (e.g. actf{example_flag})
Author: ctfhaxor
Points: 70
Hint: Are you sure that‚Äôs an mp4 file? What‚Äôs inside the file?
Solution First, we deduced some information about the challenge by reading the description. ‚ÄúThe flag is all lowercase‚Äù implies that we will be constructing it letter by letter, possibly from audio.</description></item><item><title>√•ngstromCTF lithp</title><link>https://osusec.org/blog/angstromctf-lithp/</link><pubDate>Fri, 26 Apr 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/angstromctf-lithp/</guid><description>Problem My friend gave me this program but I couldn‚Äôt understand what he was saying ‚Äì what was he trying to tell me?
Author: fireholder
Points: 60
Solution First things first, let‚Äôs open that lisp program . . . It actually is lisp‚Ä¶ oh god what have I just gotten into?
The first lines were most important in solving this challenge the way I did it. It reads:
(defparameter *encrypted* &amp;#39;(8930 15006 8930 10302 11772 13806 13340 11556 12432 13340 10712 10100 11556 12432 9312 10712 10100 10100 8930 10920 8930 5256 9312 9702 8930 10712 15500 9312)) (defparameter *flag* &amp;#39;(redacted)) (defparameter *reorder* &amp;#39;(19 4 14 3 10 17 24 22 8 2 5 11 7 26 0 25 18 6 21 23 9 13 16 1 12 15 27 20)) Well, then.</description></item><item><title>UTCTF 2019 - Crackme</title><link>https://osusec.org/blog/utctf-2019-crackme/</link><pubDate>Mon, 11 Mar 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/utctf-2019-crackme/</guid><description>This was a 1200 point reversing challenge (tied for highest point value in the category). Here‚Äôs the description:
This what we see when we run the binary:
$ ./crackme Please enter the correct password. &amp;gt;pls Incorrect password. utflag{wrong_password_btw_this_is_not_the_flag_and_if_you_submit_this_i_will_judge_you} Let‚Äôs take a look at the code in IDA Pro:
Here‚Äôs what the decompilation shows:
Read in 64 bytes from stdin Call divide(32, 0), and save the return value to v4 xor our input at index v4 with 8 Replace a few characters of our input with ‚ÄòD‚Äô xor each character in our input with 0x27 Now we see ‚Äústuff[j] = stuff2[202 ‚Äì j] ^ (stuff[j] ‚Äì 1);‚Äù.</description></item><item><title>UTCTF 2019 - Scrambled</title><link>https://osusec.org/blog/utctf-2019-scrambled/</link><pubDate>Mon, 11 Mar 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/utctf-2019-scrambled/</guid><description>Tl;dr Cool encoding using Rubik‚Äôs cube, I wrote a Python script.
This was a 1250 point Forensics challenge (highest points in the category). Here‚Äôs the description:
By the time I took a look at the challenge, they had released a hint as well:
Based on the hint, I quickly discovered that the challenge description described ways of manipulating a Rubik‚Äôs Cube:
Googling the hint (‚Äúrubikstega‚Äù) leads to a paper entitled ‚ÄúRubikstega: A Novel Noiseless Steganography Method in Rubik‚Äôs Cube‚Äù (link).</description></item><item><title>UTCTF 2019 - Rogue Leader</title><link>https://osusec.org/blog/utctf-2019-rogue-leader/</link><pubDate>Sun, 10 Mar 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/utctf-2019-rogue-leader/</guid><description>Problem Description Our once-venerable president has committed the unspeakable crime of dine-and-dashing the pizza during our own club meetings. He‚Äôs on the run as we speak, but we‚Äôre not sure where he‚Äôs headed.
Luckily, he forgot that we had planted a packet sniffer on his laptop, and we were able to retrieve the following capture when we raided his apartment: [pcap].
He‚Äôs too smart to email his plans to himself, but I‚Äôm certain he took them with him somehow.</description></item><item><title>NSA Codebreaker 2018 - Task 6</title><link>https://osusec.org/blog/nsa-codebreaker-2018-task-6/</link><pubDate>Wed, 16 Jan 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nsa-codebreaker-2018-task-6/</guid><description>Loophole ‚Äì (Smart-Contract Development; Vulnerability Analysis; Exploit Development)
Task 6 has us exploit a loophole in the smart-contracts to recover the decryption key without spending any ether (not including transaction costs). We are given the source for three smart contracts: the Escrow contract, the Ransom contract, and the Registry contract.
Decryption Overview Let‚Äôs first look at the intended method of recovering the decryption key.
From the Escrow contract, the victim calls payRansom() to pay the ransom amount.</description></item><item><title>NSA Codebreaker 2018 Task 7</title><link>https://osusec.org/blog/nsa-codebreaker-2018-task-7/</link><pubDate>Wed, 16 Jan 2019 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/nsa-codebreaker-2018-task-7/</guid><description>Refunds ‚Äì (Smart-Contract Development; Vulnerability Analysis; Exploit Development)
Task 7 has us refund the victims who have already paid the ransom. In other words, we need to recover all the funds in the Escrow contract, then transfer the funds to the victims. Recall that from task 6, we found that we could deploy and authenticate arbitrary ransom contracts.
Scanning for Vulnerabilities A natural place we can start looking for a vulnerability is the requestRefund() function.</description></item><item><title>HITCON CTF 2018 EV3 Basic</title><link>https://osusec.org/blog/hitcon-ctf-2018-ev3-basic/</link><pubDate>Mon, 22 Oct 2018 00:00:00 -0700</pubDate><guid>https://osusec.org/blog/hitcon-ctf-2018-ev3-basic/</guid><description>Link to Github
Even though this was a pretty simple challenge, I really enjoyed it and wanted to do a write-up for it anyways.
EV3 is the latest generation of the LEGO Mindstorms robots, and thanks to this challenge I know a lot more about the Mindstorms Communication and Firmware Developer Kits than I ever thought I would.
The challenge includes two files: A picture of the screen of the robot, and a .</description></item></channel></rss>